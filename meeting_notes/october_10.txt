Everyone should put their code on the repo so that we can learn from each other. 
------------------------------
By October 18:

Explore data + Visualization:
-distributions of variables
-looking for outliers
-descriptive statistics

Data cleaning + preprocessing:
-missing values and duplicates
-basic data manipulation
-preliminary feature engineering
--------------------------------------

Glicko-2 - By Oct 18
-engineered feature
-precomputed
-how do we store values? SQLite or save as a pickle of a dataframe (one might be faster).
-Use parallel processing if possible and necessary. joblib Parallel makes it easy to convert a loop into a parallel computation (we will probably need to loop over all players in a tournament).

# Single process loop
for path in tqdm.tqdm(path_list[batch_size*2: ]):
    process_slp_file(path,...,error_list)

# Use joblib to parallelize loop
Parallel(n_jobs=20, verbose=1)(delayed(process_slp_file)(path,...,error_list) for path in tqdm.tqdm(path_list[batch_size*2: ]))


matchup rank (character v character):
{
"melee/marth/fox" : {1462089731:x_1, 1468799999:x_2,...},
"melee/marth/falco" : {1462089731:y_1, 1468799999:y_2,...},
...
}

overall rank (against any player any character):
{1462089731:X_1, 1468799999:X_2,...}

zain gives us problems because he does not always play the same character, but he only plays one character in a given tournament.

-Make some visualizations for the player ranks over time. Can we infer anything about character matches from the rankings.

Jaspar will give this a shot over the weekend. I don't know if this is more than I can do in a weekend.
-----------------------------

We will have a dataloader (pytorch not sklearn) that constructs a training example from a given top 8. No future data. Data loading can be done in parallel, but if we want to do that in a Jupyter notebook, we can't be in Windows I don't know about Mac os, but it works in Linux.


It will look up:
-overall player rank
-player rank against the characters the opponents are playing (or most commonly plays
-anything else we precompute

It will search the dataset for player vs player history with a time component (more recent history is more important). 
-Should have an efficient function to do this for any two given players by October 18. It should take into account that some players appear multiple times and handle missing values. 

It will look at how the player has done so far this tournament:
- are they playing particulary well, i.e. how do their results compare to the results their player rank predicts they should do.
- this might mean that we have a separate simpler model that predicts a single set, apply it to the games of the tournament and add that as a feature. The model for the top 8 would include that feature.

It will handle missing values. Either we will imputed beforehand, or it will do it as it constructs the training example. Should have some idea about what are the relevant missing values and how to handle them by October 18

It will add any features we want to engineer but not that we have precomputed. Think about other features we can engineer, write functions that do it.


